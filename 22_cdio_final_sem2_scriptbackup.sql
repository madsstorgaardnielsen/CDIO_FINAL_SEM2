-- MySQL Script generated by MySQL Workbench
-- Fri Jun 19 14:39:10 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema cdio_final
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `cdio_final` ;

-- -----------------------------------------------------
-- Schema cdio_final
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `cdio_final` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `cdio_final` ;

-- -----------------------------------------------------
-- Table `cdio_final`.`Ingredients`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cdio_final`.`Ingredients` ;

CREATE TABLE IF NOT EXISTS `cdio_final`.`Ingredients` (
  `IngredientID` INT NOT NULL,
  `IngredientName` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`IngredientID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `cdio_final`.`IngredientBatch`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cdio_final`.`IngredientBatch` ;

CREATE TABLE IF NOT EXISTS `cdio_final`.`IngredientBatch` (
  `IngredientBatchID` INT NOT NULL,
  `IngredientID` INT NOT NULL,
  `IngredientAmount` DECIMAL(8,4) NOT NULL,
  `IngredientSupplier` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`IngredientBatchID`),
  INDEX `IngredientID_idx` (`IngredientID` ASC),
  CONSTRAINT `IngredientID`
    FOREIGN KEY (`IngredientID`)
    REFERENCES `cdio_final`.`Ingredients` (`IngredientID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `cdio_final`.`Recipes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cdio_final`.`Recipes` ;

CREATE TABLE IF NOT EXISTS `cdio_final`.`Recipes` (
  `RecipeID` INT NOT NULL,
  `recipeName` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`RecipeID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `cdio_final`.`Users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cdio_final`.`Users` ;

CREATE TABLE IF NOT EXISTS `cdio_final`.`Users` (
  `UserID` INT NOT NULL AUTO_INCREMENT,
  `Firstname` VARCHAR(45) NOT NULL,
  `Lastname` VARCHAR(45) NOT NULL,
  `Initials` VARCHAR(45) NOT NULL,
  `Role` VARCHAR(45) NOT NULL,
  `isActive` TINYINT NOT NULL,
  PRIMARY KEY (`UserID`))
ENGINE = InnoDB
AUTO_INCREMENT = 1
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `cdio_final`.`ProductBatch`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cdio_final`.`ProductBatch` ;

CREATE TABLE IF NOT EXISTS `cdio_final`.`ProductBatch` (
  `ProductBatchID` INT NOT NULL AUTO_INCREMENT,
  `RecipeID` INT NOT NULL,
  `status` INT NOT NULL,
  `ProduktionsLederID` INT NOT NULL,
  `creationDate` DATE NOT NULL,
  `finishDate` DATE NULL DEFAULT NULL,
  `taraSum` DECIMAL(8,4) NULL DEFAULT NULL,
  `nettoSum` DECIMAL(8,4) NULL DEFAULT NULL,
  PRIMARY KEY (`ProductBatchID`),
  INDEX `UserID_idx` (`ProduktionsLederID` ASC),
  INDEX `RecipeID_idx` (`RecipeID` ASC),
  CONSTRAINT `RecipeID`
    FOREIGN KEY (`RecipeID`)
    REFERENCES `cdio_final`.`Recipes` (`RecipeID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `UserID`
    FOREIGN KEY (`ProduktionsLederID`)
    REFERENCES `cdio_final`.`Users` (`UserID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 1
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `cdio_final`.`ProductBatchComponents`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cdio_final`.`ProductBatchComponents` ;

CREATE TABLE IF NOT EXISTS `cdio_final`.`ProductBatchComponents` (
  `ProductBatchComponentsID` INT NOT NULL AUTO_INCREMENT,
  `ProductBatchID` INT NULL DEFAULT NULL,
  `IngredientID` INT NULL DEFAULT NULL,
  `IngredientBatchID` INT NULL DEFAULT NULL,
  `LaborantID` INT NULL DEFAULT NULL,
  `tara` DECIMAL(8,4) NULL DEFAULT NULL,
  `netto` DECIMAL(8,4) NULL DEFAULT NULL,
  `terminal` INT NULL DEFAULT NULL,
  `amount` DECIMAL(8,4) NULL DEFAULT NULL,
  `tolerance` DECIMAL(8,4) NULL DEFAULT NULL,
  PRIMARY KEY (`ProductBatchComponentsID`),
  INDEX `IngredientID_fk_idx` (`IngredientID` ASC),
  INDEX `ProductBatchID_fk_idx` (`ProductBatchID` ASC),
  INDEX `LaborantID_fk_idx` (`LaborantID` ASC),
  INDEX `IngredientBatchID_fk_idx` (`IngredientBatchID` ASC),
  CONSTRAINT `IngredientBatchID_fk1`
    FOREIGN KEY (`IngredientBatchID`)
    REFERENCES `cdio_final`.`IngredientBatch` (`IngredientBatchID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `IngredientID_fk`
    FOREIGN KEY (`IngredientID`)
    REFERENCES `cdio_final`.`Ingredients` (`IngredientID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `LaborantID_fk`
    FOREIGN KEY (`LaborantID`)
    REFERENCES `cdio_final`.`Users` (`UserID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `ProductBatchID_fk`
    FOREIGN KEY (`ProductBatchID`)
    REFERENCES `cdio_final`.`ProductBatch` (`ProductBatchID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 1
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `cdio_final`.`RecipeComponents`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cdio_final`.`RecipeComponents` ;

CREATE TABLE IF NOT EXISTS `cdio_final`.`RecipeComponents` (
  `RecipeID` INT NOT NULL,
  `IngredientID` INT NOT NULL,
  `nonNetto` DECIMAL(8,4) NOT NULL,
  `tolerance` DECIMAL(8,4) NOT NULL,
  PRIMARY KEY (`RecipeID`, `IngredientID`),
  INDEX `IngredientID_idx` (`IngredientID` ASC),
  CONSTRAINT `ingredientIDf`
    FOREIGN KEY (`IngredientID`)
    REFERENCES `cdio_final`.`Ingredients` (`IngredientID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `recipeIDf`
    FOREIGN KEY (`RecipeID`)
    REFERENCES `cdio_final`.`Recipes` (`RecipeID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

USE `cdio_final` ;

-- -----------------------------------------------------
-- procedure AddComponents
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`AddComponents`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `AddComponents`(
IN ProductBatchId_IN INT,
IN IngredientID_IN VARCHAR(30)
)
BEGIN 
INSERT INTO ProductBatchComponents (ProductBatchID, IngredientID) 
VALUES (ProductBatchId_IN,IngredientID_IN);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AddIngredient
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`AddIngredient`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `AddIngredient`(
IN ingredientID_IN INT,
IN ingredientName_IN VARCHAR(30)
)
BEGIN 
INSERT INTO Ingredients
VALUES (ingredientID_IN, ingredientName_IN);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AddIngredientBatch
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`AddIngredientBatch`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `AddIngredientBatch`(
IN ingredientBatchID_IN INT,
IN ingredientID_IN INT,
IN ingredientAmount_IN DECIMAL(8,4),
IN ingredientSupplier_IN VARCHAR(30)
)
BEGIN 
INSERT INTO IngredientBatch
VALUES (ingredientBatchID_IN, ingredientID_IN, ingredientAmount_IN, ingredientSupplier_IN);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AddProductBatch
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`AddProductBatch`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `AddProductBatch`(
IN recipeID_IN INT,
IN produktionslederID_IN INT
)
BEGIN 
DECLARE newProductID INT;

INSERT INTO ProductBatch (RecipeID, status, ProduktionsLederID, creationDate)
VALUES (recipeID_IN, 0, produktionslederID_IN, CURDATE());

SELECT LAST_INSERT_ID();

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AddProductBatchComponent
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`AddProductBatchComponent`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `AddProductBatchComponent`(
ProductBatchID_IN INT,
IngredientBatchID_IN INT,
LaborantID_IN INT,
tara_IN DECIMAL(8,4),
netto_IN DECIMAL(8,4),
terminal_IN INT
)
BEGIN
INSERT INTO ProductBatchComponents (ProductBatchID, IngredientBatchID, LaborantID, tara, netto, terminal)
VALUES (ProductBatchID_IN, IngredientBatchID_IN, LaborantID_IN, tara_IN, netto_IN, terminal_IN);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AddRecipe
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`AddRecipe`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `AddRecipe`(
IN vRecipeID int,
IN vRecipeName varchar(45)
)
BEGIN
INSERT INTO Recipes
VALUES(vRecipeID, vRecipeName);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AddRecipeComponent
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`AddRecipeComponent`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `AddRecipeComponent`(
IN vRecipeID int,
IN vIngredientID INT,
IN vnonnetto DECIMAL(8,4),
IN vtolerance DECIMAL(8,4)
)
BEGIN
INSERT INTO RecipeComponents
VALUES(vRecipeID, vIngredientID, vnonnetto, vtolerance);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AddUser
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`AddUser`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `AddUser`(
IN firstName_IN VARCHAR(30),
IN lastName_IN VARCHAR(30),
IN initials_IN VARCHAR(30),
IN role_IN VARCHAR(30),
IN isActive_IN TINYINT
)
BEGIN 
INSERT INTO Users
VALUES (UserID, firstName_IN, lastName_IN, initials_IN, role_IN, isActive_IN);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DeleteIngredient
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`DeleteIngredient`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `DeleteIngredient`(
IN ingredientID_IN INT
)
BEGIN 
DELETE FROM Ingredients WHERE IngredientID=IngredientID_IN;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DeleteIngredientBatch
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`DeleteIngredientBatch`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `DeleteIngredientBatch`(
IN ingredientBatchID_IN INT
)
BEGIN 
DELETE FROM IngredientBatch WHERE IngredientBatchID=ingredientBatchID_IN;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DeleteProductBatch
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`DeleteProductBatch`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `DeleteProductBatch`(
IN productBatchId_IN INT
)
BEGIN 
DELETE FROM ProductBatch WHERE ProductBatchID=productBatchId_IN;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DeleteProductBatchFromRecipeIdUserId
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`DeleteProductBatchFromRecipeIdUserId`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `DeleteProductBatchFromRecipeIdUserId`(
IN recipeId_IN INT,
IN userId_IN INT
)
BEGIN 
DELETE FROM ProductBatch 
WHERE ProduktionslederID = userId_IN and RecipeID = recipeId_IN;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DeleteRecipe
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`DeleteRecipe`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `DeleteRecipe`(
IN vRecipeID INT
)
BEGIN
DELETE FROM RecipeComponents WHERE RecipeID = vRecipeID;
DELETE FROM Recipes WHERE RecipeID = vRecipeID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DeleteRecipeComponent
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`DeleteRecipeComponent`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `DeleteRecipeComponent`(
IN vRecipeID INT,
IN vIngredientID INT
)
BEGIN
DELETE FROM RecipeComponents 
WHERE RecipeID = vRecipeID AND IngredientID = vIngredientID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DeleteUser
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`DeleteUser`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `DeleteUser`(
IN UserID_IN INT
)
BEGIN 
DELETE FROM Users 
WHERE UserID_IN = UserID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GetAllIngredientBatch
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`GetAllIngredientBatch`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `GetAllIngredientBatch`(
)
BEGIN 
SELECT*FROM IngredientBatch;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GetAllIngredients
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`GetAllIngredients`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `GetAllIngredients`(
)
BEGIN 
SELECT*FROM Ingredients;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GetAllProductBatch
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`GetAllProductBatch`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `GetAllProductBatch`(
)
BEGIN 
SELECT*FROM ProductBatch;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GetAllRecipeComponents
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`GetAllRecipeComponents`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `GetAllRecipeComponents`()
BEGIN
SELECT * FROM RecipeComponents;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GetAllRecipeComponentsFromID
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`GetAllRecipeComponentsFromID`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `GetAllRecipeComponentsFromID`(
IN vRecipeID int
)
BEGIN
SELECT RecipeID, IngredientID, nonNetto, tolerance, ingredientName FROM RecipeComponents NATURAL JOIN Ingredients
WHERE RecipeID = vRecipeID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GetAllRecipes
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`GetAllRecipes`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `GetAllRecipes`()
BEGIN
SELECT * FROM Recipes NATURAL JOIN RecipeComponents
GROUP BY RecipeID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GetAllRecipesOnly
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`GetAllRecipesOnly`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `GetAllRecipesOnly`()
BEGIN
SELECT * FROM Recipes
GROUP BY RecipeID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GetAllUsers
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`GetAllUsers`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `GetAllUsers`(
)
BEGIN 
SELECT*
FROM Users;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GetBatchByIngredient
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`GetBatchByIngredient`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `GetBatchByIngredient`(
IngredientID_IN int
)
begin 
select IngredientBatchID, IngredientID, IngredientAmount, IngredientSupplier
from IngredientBatch
where IngredientID = IngredientID_IN;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GetBatchInformation
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`GetBatchInformation`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `GetBatchInformation`(
BatchID_IN int
)
begin
select ProductBatchID ,ProductBatchComponentsID, p.IngredientID, IngredientBatchID, amount, tolerance, p.IngredientID, LaborantID, IngredientName
from ProductBatchComponents as p inner join Ingredients as i
on p.IngredientID = i.IngredientID
where ProductBatchID = BatchID_IN;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GetCompByBatch
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`GetCompByBatch`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `GetCompByBatch`(
IN ProductBatchID_IN int
)
BEGIN
#SELECT (IngredientID, ProductBatchComponentsID, ProductBatchID, IngredientBatchID, 
#LaborantID, tara, netto, terminal,  amount, IngredientName)
SELECT *
FROM cdio_final.ProductBatchComponents NATURAL JOIN Ingredients 
WHERE ProductBatchID = ProductBatchID_IN;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GetIngredient
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`GetIngredient`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `GetIngredient`(
IN ingredientID_IN VARCHAR(30)
)
BEGIN 
SELECT*FROM Ingredients 
WHERE IngredientID=IngredientID_IN;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GetIngredientBatch
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`GetIngredientBatch`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `GetIngredientBatch`(
IN ingredientBatchID_IN INT
)
BEGIN 
SELECT*FROM IngredientBatch
WHERE IngredientBatchID=IngredientBatchID_IN;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GetProductBatch
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`GetProductBatch`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `GetProductBatch`(
IN ProductBatchID_IN int
)
BEGIN
SELECT * FROM ProductBatch WHERE ProductBatchID = ProductBatchID_IN;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GetProductBatchComponent
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`GetProductBatchComponent`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `GetProductBatchComponent`(
in BatchID_IN int
)
begin
select *
from ProductBatchComponents
where ProductBatchID = BatchID_IN;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GetProductBatchComponentByID
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`GetProductBatchComponentByID`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `GetProductBatchComponentByID`(
BatchID_IN int
)
begin 
select *
from ProductBatchComponents
where ProductBatchComponentsID = BatchID_IN;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GetProductBatchFromRecipeIdUserIdProductBatchId
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`GetProductBatchFromRecipeIdUserIdProductBatchId`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `GetProductBatchFromRecipeIdUserIdProductBatchId`(
IN recipeId_IN INT,
IN userId_IN INT
)
BEGIN 
SELECT*FROM ProductBatch 
WHERE ProduktionslederID = userId_IN and RecipeID = recipeId_IN;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GetRecipe
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`GetRecipe`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `GetRecipe`(
IN vRecipeID int
)
BEGIN
SELECT * FROM Recipes NATURAL JOIN RecipeComponents WHERE RecipeID = vRecipeID ;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GetRecipeComponent
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`GetRecipeComponent`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `GetRecipeComponent`(
IN vRecipeID int,
IN vIngredientID int
)
BEGIN
SELECT RecipeID, IngredientID, nonNetto, tolerance, ingredientName FROM RecipeComponents NATURAL JOIN Ingredients
WHERE RecipeID = vRecipeID AND IngredientID = vIngredientID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GetRecipeOnly
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`GetRecipeOnly`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `GetRecipeOnly`(
IN vRecipeID int
)
BEGIN
SELECT * FROM Recipes WHERE RecipeID = vRecipeID ;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GetUser
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`GetUser`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `GetUser`(IN vUserID INT)
BEGIN
SELECT * FROM Users WHERE UserID = vUserID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SetStatus
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`SetStatus`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `SetStatus`(
BatchID_IN int
)
begin 
update ProductBatch
set status = 1
where ProductBatchID = BatchID_IN;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SetStatusDone
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`SetStatusDone`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `SetStatusDone`(
in BatchID_IN int,
in TaraSum_IN decimal(8,4),
in NettoSum_IN decimal(8,4)
)
begin 
update ProductBatch
set ProductBatch.status = '2', taraSum = TaraSum_IN, nettoSum = NettoSum_IN, finishDate = curdate()
where ProductBatchID = BatchID_IN;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SubtractFromIngredientAmount
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`SubtractFromIngredientAmount`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `SubtractFromIngredientAmount`(
IngredientID_IN int,
AmountSubtrahend_IN decimal(8,4)
)
begin 
update IngredientBatch
set IngredientAmount = IngredientAmount - AmountSubtrahend_IN
where IngredientBatchID = IngredientID_IN;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure UpdateActivity
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`UpdateActivity`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `UpdateActivity`(
IN UserID_IN INT,
IN IsActive_IN tinyint
)
BEGIN
update Users
set isActive=IsActive_IN
where UserID=UserID_IN;

select *
from Users
where UserID=UserID_IN;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure UpdateIngredient
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`UpdateIngredient`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `UpdateIngredient`(
IN ingredientID_IN INT,
IN ingredientName_IN VARCHAR(30)
)
BEGIN 
UPDATE Ingredients
SET IngredientID = ingredientID_IN, IngredientName=ingredientName_IN
WHERE IngredientID=ingredientID_IN;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure UpdateIngredientBatch
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`UpdateIngredientBatch`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `UpdateIngredientBatch`(
IN ingredientBatchID_IN INT,
IN ingredientID_IN INT,
IN ingredientAmount_IN DECIMAL(8,4),
IN ingredientSupplier_IN VARCHAR(30)
)
BEGIN 
UPDATE IngredientBatch
SET IngredientBatchID = ingredientBatchID_IN, IngredientID = ingredientID_IN, IngredientAmount=ingredientAmount_IN, IngredientSupplier = ingredientSupplier_IN
WHERE IngredientBatchID=ingredientBatchID_IN;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure UpdateProductBatch
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`UpdateProductBatch`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `UpdateProductBatch`(
IN ProductBatchID_IN INT,
IN recipeId_IN INT,
IN status_IN INT, 
IN ProductionleaderID_IN INT,
IN creationDate_IN VARCHAR(30), 
IN finishDate_IN VARCHAR(30),
IN tarasum_IN DECIMAL(8,4),
IN nettoSum_IN DECIMAL(8,4)
)
BEGIN 
UPDATE ProductBatch
SET ProductBatchID = ProductBatchID_IN, RecipeID = recipeId_IN, status = status_IN, ProduktionsLederID = ProductionleaderID_IN, 
creationDate = creationDate_IN, finishDate = finishDate_IN,  taraSum = taraSum_IN, nettoSum = nettoSum_IN
WHERE ProductBatchID=ProductBatchID_IN;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure UpdateProductBatchComponent
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`UpdateProductBatchComponent`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `UpdateProductBatchComponent`(
in ProductBatch_IN int,
in IngredientBatchID_IN int,
in LaborantID_IN int,
in Tara_IN decimal(8,4),
in Netto_IN decimal(8,4),
in Terminal_IN int
)
begin
update ProductBatchComponents
set
IngredientBatchID = IngredientBatchID_IN,
LaborantID = LaborantID_IN,
tara = Tara_IN,
netto = Netto_IN,
terminal = Terminal_IN
where
ProductBatchComponentsID = ProductBatch_IN;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure UpdateRecipe
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`UpdateRecipe`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `UpdateRecipe`(
IN vRecipeID int,
IN vRecipeName varchar(45)
)
BEGIN
UPDATE Recipes
SET RecipeID = vRecipeID,
RecipeName = vRecipeName
WHERE RecipeID = vRecipeID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure UpdateRecipeComponent
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`UpdateRecipeComponent`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `UpdateRecipeComponent`(
IN vRecipeID INT,
IN vIngredientID INT,
IN vnonNetto DECIMAL(8,4),
IN vtolerance DECIMAL(8,4)
)
BEGIN
UPDATE RecipeComponents
SET RecipeID = vRecipeID,
IngredientID = vIngredientID,
nonNetto = vnonNetto,
tolerance = vtolerance
WHERE RecipeID = vRecipeID AND IngredientID = vIngredientID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure UpdateUser
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`UpdateUser`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `UpdateUser`(
IN UserID_IN INT,
IN firstName_IN VARCHAR(30),
IN lastName_IN VARCHAR(30),
IN initials_IN VARCHAR(30),
IN role_IN VARCHAR(30),
IN isActive_IN TINYINT
)
BEGIN 
UPDATE Users
SET FirstName = firstName_IN, LastName=lastName_IN, Initials=initials_IN, role=role_IN, isActive=isActive_IN 
WHERE UserID=UserID_IN;
select *
from Users
where UserID=UserID_IN;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getUserFromFirstNameLastName
-- -----------------------------------------------------

USE `cdio_final`;
DROP procedure IF EXISTS `cdio_final`.`getUserFromFirstNameLastName`;

DELIMITER $$
USE `cdio_final`$$
CREATE DEFINER=`admin`@`%` PROCEDURE `getUserFromFirstNameLastName`(
IN firstname_IN VARCHAR(30),
IN lastname_IN VARCHAR(30)
)
BEGIN 
SELECT*FROM Users WHERE Firstname = 'Test' AND Lastname = 'Test';
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
